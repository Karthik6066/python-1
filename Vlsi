Design of CMOS Gates
Not gate:
module inverter(
    input A,
    output Y    );
supply1 vcc;
supply0 vss;
pmos t1(Y,vcc,A);
nmos t2(Y,vss,A);
endmodule 
AND gate:
module andg(
    input a,
    input b,
    output y );
supply1 vcc;
supply0 vss;
wire w1,w2;
pmos t1(w1,vcc,a);
pmos t2(w1,vcc,b);
pmos t5(y,vcc,w1);
nmos t3(w1,w2,a);
nmos t4(w2,vss,b);
nmos t6(y,vss,w1);
endmodule
 
OR  gate:
module org(
    input a,
    input b,
    output y);
supply1 vcc;
supply0 vss;
pmos t1(w2,vcc,a);
pmos t2(w1,w2,b);
pmos t5(y,vcc,w1);
nmos t3(w1,vss,a); 
nmos t4(w1,vss,b); 
nmos t6(y,vss,w1); 
endmodule
 
Nand gate:
module nandg(
    input a,
    input b,
    output y );
supply1 vcc;
supply0 vss;
wire w;
pmos t1(y,vcc,a);
pmos t2(y,vcc,b);
nmos t3(y,w,a);
nmos t4(w,vss,b);
endmodule
 
Nor gate:
module norg(
    input a,
    input b,
    output y );
supply1 vcc;
supply0 vss; 
wire w; 
pmos t1(w,vcc,a);
pmos t2(y,w,b);
nmos t3(y,vss,a); 
nmos t4(y,vss,b);
endmodule 
Xor gate:
module xorg(
    input a,abar,input b,bbar,
    output y );
supply1 vcc;
supply0 vss;
wire w1,w2,w3,w4;
pmos p1(w1,vcc,a);
pmos p2(y,w1,bbar);
pmos p3(w2,vcc,abar);
pmos p4(y,w2,b);
nmos n1(y,w3,a);
nmos n2(w3,vss,b);
nmos n3(y,w4,abar);
nmos n4(w4,vss,bbar);
endmodule
 
Xnor gate:
module xnorg(
    input a,abar, 
    input b,bbar,
    output y
    );
wire w1,w2,w3,w4;
supply1 vcc; 
supply0 vss;
pmos p1(w1,vcc,a);
pmos p2(y,w1,b);
pmos p3(w2,vcc,abar);
pmos p4(y,w2,bbar);
nmos n1(y,w3,a);
nmos n2(w3,vss,bbar); 
nmos n3(y,w4,abar); 
nmos n4(w4,vss,b); 
endmodule
 




Design of Adders
Half Adder:
module halfadder(
    output sum,
    output carry,
    input a,b);
xor sum1(sum,a,b);
and carry1(carry,a,b);
endmodule
 

Full Adder:
module fulladder(
    output sum, 
    output carry,
    input a,b,c );
halfadder ha1(w1,w2,a,b); 
halfadder ha2(sum,w3,w1,c);
org g1(w3,w2,carry);
endmodule
 
Ripple Carry Adder:
module rippleadder(
    output [3:0] s,
    output cout,
    input [3:0] a,
    input [3:0] b,
    input co
    ); 
wire w1,w2,w3; 
fulladder fa1(s[0],w1,a[0],b[0],co); 
fulladder fa2(s[1],w2,a[1],b[1],w1);
fulladder fa3(s[2],w3,a[2],b[2],w2);
fulladder fa4(s[3],cout,a[3],b[3],w3);
endmodule
 



Design of Multiplexers
 MUX 4X1:                                       
module mux4x1(
    input [3:0] i,
    input s0,s1,
    output y
    );
wire s0b,s1b,w1,w2,w3,w4;
not (s0b,s0),(s1b,s1);
and (w1,i[0],s0b,s1b),(w2,i[1],s0b,s1),(w3,i[2],s0,s1b),(w4,i[3],s0,s1);
or (y,w1,w2,w3,w4);

endmodule
 
MUX 8X1:
module mux8x1(
    input [7:0] d,
    input [2:0] s,
    output y
    );
reg y;
always@(d or s)
begin
case(s)
3'b000:y=d[0];
3'b001:y=d[1];
3'b010:y=d[2];
3'b011:y=d[3];
3'b100:y=d[4];
3'b101:y=d[5];
3'b110:y=d[6];
3'b111:y=d[7];
endcase
end
endmodule
 













Design of Demultiplexers
DEMUX 1X4:
module demux1x4(
input d,
input [1:0] s,
output [3:0] y
);
assign y[0] = d &amp;(~s[0])&amp;(~s[1]);
assign y[1] = d &amp;(s[0])&amp;(~s[1]);
assign y[2] = d &amp;(~s[0])&amp;(s[1]);
assign y[3] = d &amp;(s[0])&amp;(s[1]);
endmodule     
DEMUX 1X8:
module demux1x8(
    input d,
    input [2:0] s,
    output [7:0]                          
  );                                                            
reg [7:0] z;
always@(d or s)
begin 
if(s==3'b000)
z[0]=d;
else if(s==3'b001)
z[1]=d;
else if(s==3'b010)
z[2]=d;
else if(s==3'b011)
z[3]=d;
else if(s==3'b100)
z[4]=d;
else if(s==3'b101)
z[5]=d;
else if(s==3'b110)
z[6]=d;
else z[7]=d;
end
endmodule
 






Design of Encoders
4 to 2 encoder:
module encoder(
    input y0,y1,y2,y3,
    output a0,a1
    );
assign a0=y3|y1;
assign a1=y3|y2;
endmodule
 
 8 to 3 encoder:
module encoder2(
    input [7:0] y,
    output reg[2:0] a
    );
always@(y)
if(y==8'b00000001) a=3'b000;
else if(y==8'b00000010) a=3'b001;
else if(y==8'b00000100) a=3'b010;
else if(y==8'b00001000) a=3'b011;
else if(y==8'b00010000) a=3'b100;
else if(y==8'b00100000) a=3'b101;
else if(y==8'b01000000) a=3'b110;
else if(y==8'b10000000) a=3'b111;
endmodule
 














Design of Decoders
2to4 decoder:
module decoder(
    input [1:0] a,
    input b,
    output [3:0] y
    );
assign y[0]=(~a[0]&~a[1]&b);
assign y[1]=a[0]&(~a[1]&b);
assign y[2]=(~a[0]&a[1]&b);
assign y[3]=a[0]&a[1]&b;
endmodule
 
3to8 decoder:
           module decoder2(
    input [2:0] a,
    input b,
    output reg[7:0] y
    );
 always@(a,b)
 if(b==0) y=8'b00000000;
 else if(a==3'b000) y=8'b00000001;
 else if(a==3'b001) y=8'b00000010;
 else if(a==3'b010) y=8'b00000100;
 else if(a==3'b011) y=8'b00001000;
 else if(a==3'b100) y=8'b00010000;
 else if(a==3'b101) y=8'b00100000;
 else if(a==3'b110) y=8'b01000000;
 else if(a==3'b111) y=8'b10000000;
endmodule
 


SR FF Behavioral:
module SR_flipflop(q,q1,r,s,clk);
output q,q1;
input r,s,clk;
reg q,q1;
initial
begin
q=1'b0; q1=1'b1;                                      
end
always @(posedge clk)
begin
case({s,r})
{1'b0,1'b0}: begin q=q; q1=q1; end
{1'b0,1'b1}: begin q=1'b0; q1=1'b1; end
{1'b1,1'b0}: begin q=1'b1; q1=1'b0; end
{1'b1,1'b1}: begin q=1'bx; q=1'bx; end
endcase
end
endmodule.
 




T FF Behavioral:
module TFlipFlop(T,Clk,Q,Qbar );
input T ,Clk;
output Q, Qbar;
reg Q, Qbar;
always@(T,posedge(Clk))
begin
if(T==0)
begin
 Q =1'b1;
 Qbar=1'b0;
end
else
begin
 Q =1'b0;
 Qbar=1'b1;
 end
end
endmodule
 










JK FF Behavioral:
module jf_ff(
    input j,k,
    output q,q1,
    input clk
    );
	 reg q,q1;
	 initial
	 begin
	 q=1'b0;q1=1'b1;
	 end
	 
always @(posedge clk)
begin
case({j,k})
2'b00:q<=q;
2'b01:q<=0;
2'b10:q<=1;
2'b11:q<=~q;
endcase 
q1=~q;
end
endmodule
 


D FF Behavioral:
module d_ff( q, q_bar,d, clk);
input d ,clk;
output q,q_bar;
reg q,q_bar;
always@ (posedge clk)
begin
q <= d;
q_bar <= !d;
end
endmodule
 DESIGN OF ALU
4-BIT ALU:
module ALU_4_bit(a, b, operation, Result);
      input [3:0] a;
      input [3:0] b;
      input [1:0] operation;
      output [3:0]Result;
      reg [3:0] Result;
      always@(a or b or operation)
          begin
               case (operation)
                  2'b00:  Result = a & b;   // AND
                  2'b01:  Result = a  |   b;   // OR
                  2'b10:  Result = a +  b;    // addition
                  2'b11:  Result = a - b;    // subtraction
               endcase
           end
endmodule

 






8-BIT ALU:
module ALU_8_bit(a, b, operation, Result);
      input [3:0] a;
      input [3:0] b;
      input [2:0] operation;
      output [3:0]Result;
      reg [3:0] Result;
      always@(a or b or operation)
          begin
               case (operation)
                  3'b000:  Result = a & b;   // AND
                  3'b001:  Result = a  |   b;   // OR
                  3'b010:  Result = a +  b;    // addition
                  3'b011:  Result = a - b;    // subtraction
	   3'b100:  Result = ~ b;
	   3'b101:  Result = ~a ;
	   3'b110:  Result = a << 1;
	   3'b111:  Result = a >> 1 ;
               endcase
           end
endmodule
 






DESIGN OF SYNCHORONOUS COUNTER
RING COUNTER:
module ring_counter(
    Clock,
    Reset,
    Count_out
    );
    input Clock;
    input Reset;
    output [3:0] Count_out;
    reg [3:0] Count_temp;
    always @(posedge(Clock),Reset)
    begin
        if(Reset == 1'b1)   begin  
            Count_temp = 4'b0001;   end  
        else if(Clock == 1'b1)  begin  
            Count_temp = {Count_temp[2:0],Count_temp[3]};   end 
    end
    assign Count_out = Count_temp;
endmodule

 





UP AND DOWN COUNTER:
module upordown_counter(
    Clk,
    reset,
    UpOrDown, 
    Count );
    input Clk,reset,UpOrDown;
    output [3 : 0] Count;
    reg [3 : 0] Count = 0;  
     always @(posedge(Clk) or posedge(reset))
     begin
     if(reset == 1) 
            Count <= 0;    else   
	  begin		  
	 if(UpOrDown == 1)   
     begin  
if(Count == 15)
          Count <= 0;
     else
     Count <= Count + 1;  
end
     else  
     begin
 if(Count == 0)
         Count <= 15;
     else
          Count <= Count - 1;   end   
     end
     end
endmodule

 





DESIGN OF 1-BIT RAM CELL
module syncRAM( dataIn,
                dataOut,
                Addr, 
                CS, 
                WE, 
                RD, 
                Clk
              );
// parameters for the width 
parameter ADR   = 8;
parameter DAT   = 8;
parameter DPTH  = 8;
//ports
input   [DAT-1:0]  dataIn;
output reg [DAT-1:0]  dataOut;
input   [ADR-6:0]  Addr;
input CS, 
      WE, 
      RD, 
      Clk;
//internal variables
reg [DAT-1:0] SRAM [DPTH-1:0];
always @ (posedge Clk)
begin
 if (CS == 1'b1) begin
  if (WE == 1'b1 && RD == 1'b0) begin
   SRAM [Addr] = dataIn;
  end
  else if (RD == 1'b1 && WE == 1'b0) begin
   dataOut = SRAM [Addr]; 
  end
  else;
 end
 else;
end
endmodule

